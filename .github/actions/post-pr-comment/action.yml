name: Create/Update a comment on a PR
description: Creates and/or updates a comment on a PR

inputs:
  github_token:
    required: true
    type: string
  github_actor:
    required: true
    type: string
  github_event_name:
    required: true
    type: string
  github_workflow:
    required: true
    type: string
  content:
    required: true
    type: string
  comment_matcher:
    required: true
    type: string
    description: "If a comment body is found containing this string, then it will update the found comment instead of creating a new one"
  comment_footer:
    required: false
    type: string
    description: "Short text to come after content; will contain information on the PR action, owner, etc. by default"

runs:
  using: composite

  steps:
    - name: Create or update PR comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes("${{inputs.comment_matcher}}")
          })

          let commentFooter = `${{ inputs.comment_footer }}`
          if(commentFooter.length < 3){
            commentFooter = `*Pusher: @${{ github.actor }}, Action: ${{ github.event_name }}, Working Directory: ${{ env.TF_WORKING_DIRECTORY }}, Workflow: ${{ github.workflow }}*`;
          }

          const output = `${{ inputs.content}}`+ "\n\n" + commentFooter;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
