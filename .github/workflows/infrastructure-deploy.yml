name: Infrastructure Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        description: "The environment to run infrastructure deploy for:"
        required: true
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

env:
  AZ_KEYVAULT_NAME: ${{ secrets.AZ_ACA_RESOURCE_GROUP	}}-kv
  AZ_SA_COSTING_NAME: ${{ secrets.AZ_ACA_RESOURCE_GROUP }}costing

  TF_WORKING_DIRECTORY: terraform/container-app
  
  container_app_min_replicas: ${{secrets.CONTAINER_MIN_REPLICAS}}
  container_app_max_replicas: ${{secrets.CONTAINER_MAX_REPLICAS}}
  container_app_http_concurrency: ${{secrets.CONTAINER_HTTP_CONCURRENCY}}
  container_environment: ${{ inputs.environment }}

jobs:
  terraform-plan:
    name: Terraform plan
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ${{env.TF_WORKING_DIRECTORY}}
    environment: ${{ inputs.environment }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Get GitHub Runner IP
        id: whats-my-ip
        uses: ./.github/actions/whats-my-ip-address

      - name: Set GitHub Runner IP to TF Var
        shell: bash
        run: |
          echo "TF_VAR_github_ip=${{ steps.whats-my-ip.outputs.ip}}" >> $GITHUB_ENV

      - name: Login with AZ
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.AZ_TENANT_ID }}
          az_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.AZ_CLIENT_ID }}
          az_client_secret: ${{ secrets.AZ_CLIENT_SECRET }}

      - name: Replace in secret environment variable
        run: |
          AZ_SA_COSTING_NAME="${{ env.AZ_SA_COSTING_NAME }}"
          SA_COSTING_NAME="${AZ_SA_COSTING_NAME//-/}"
          echo "SA_COSTING_NAME=$SA_COSTING_NAME" >> $GITHUB_ENV

      - name: Add Runner to BlobForCost SA whitelist
        shell: bash
        run: |
          az storage account network-rule add --account-name $SA_COSTING_NAME --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null 

      - name: Add Runner to KV whitelist
        shell: bash
        run: |
          az keyvault network-rule add --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ env.AZ_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Add Runner to TF KV whitelist
        shell: bash
        run: |
          az keyvault network-rule add --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ secrets.TF_SECRETS_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Set container app image_tag env variables
        run: |
          IMAGE_TAG=$(az acr repository show-tags -n ${{ secrets.AZ_ACR_URL }} --repository plan-tech-app --top 1 --orderby time_desc |  jq '.[]' | tr -d "\"")
          echo "TF_VAR_image_tag=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set container app scaling env variables
        run: |
          declare -a env_vars=(
            "container_app_min_replicas"
            "container_app_max_replicas"
            "container_app_http_concurrency"
          )

          for var in "${env_vars[@]}"; do
            env_value="${!var}"
            if [ -n "$env_value" ]; then
              echo "TF_VAR_$var=$env_value" >> $GITHUB_ENV
            fi
          done

          if [ "$container_environment" == "Tst" ]; then
            export container_environment="Test"
          fi
            echo "TF_VAR_container_environment=$container_environment" >> $GITHUB_ENV

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}"  \
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}"  \
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER_NAME }}"  \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}"

      - name: Get secret and clean tfvars file (PowerShell)
        shell: pwsh
        run: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          az keyvault secret show `
            --name "${{ secrets.TF_SECRET_NAME }}" `
            --vault-name "${{ secrets.TF_SECRETS_KEYVAULT_NAME }}" `
            --query "value" `
            --output tsv > terraformVars.tfvars
          $content = Get-Content .\terraformVars.tfvars -Raw
          [System.IO.File]::WriteAllText("normalisedTerraformVars.tfvars", $content, [System.Text.Encoding]::UTF8)

      - name: Use normalisedTerraformVars.tfvars with Terraform
        run: terraform plan -var-file="normalisedTerraformVars.tfvars"

      - name: Delete generated files
        run: |
          Remove-Item -Force terraformVars.tfvars
          Remove-Item -Force normalisedTerraformVars.tfvars

      - name: Remove Runner from BlobForCost SA whitelist
        shell: bash
        run: |
            az storage account network-rule remove --account-name $SA_COSTING_NAME --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Remove Runner from KV whitelist
        shell: bash
        run: |
            az keyvault network-rule remove --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ env.AZ_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Add Runner to TF KV whitelist
        shell: bash
        run: |
          az keyvault network-rule remove --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ secrets.TF_SECRETS_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

  deploy-terraform:
    needs: terraform-plan
    if: false
    name: Deploy Terraform
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ${{env.TF_WORKING_DIRECTORY}}
    environment: ${{ inputs.environment }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Get GitHub Runner IP
        id: whats-my-ip
        uses: ./.github/actions/whats-my-ip-address

      - name: Set GitHub Runner IP to TF Var
        shell: bash
        run: |
          echo "TF_VAR_github_ip=${{ steps.whats-my-ip.outputs.ip}}" >> $GITHUB_ENV

      - name: Login with AZ
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.AZ_TENANT_ID }}
          az_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.AZ_CLIENT_ID }}
          az_client_secret: ${{ secrets.AZ_CLIENT_SECRET }}

      - name: Replace in secret environment variable
        run: |
          AZ_SA_COSTING_NAME="${{ env.AZ_SA_COSTING_NAME }}"
          SA_COSTING_NAME="${AZ_SA_COSTING_NAME//-/}"
          echo "SA_COSTING_NAME=$SA_COSTING_NAME" >> $GITHUB_ENV

      - name: Add Runner to BlobForCost SA whitelist
        shell: bash
        run: |
          az storage account network-rule add --account-name $SA_COSTING_NAME --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null 

      - name: Add Runner to KV whitelist
        shell: bash
        run: |
          az keyvault network-rule add --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ env.AZ_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Add Runner to TF KV whitelist
        shell: bash
        run: |
          az keyvault network-rule add --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ secrets.TF_SECRETS_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Set container app image_tag env variables
        run: |
          IMAGE_TAG=$(az acr repository show-tags -n ${{ secrets.AZ_ACR_URL }} --repository plan-tech-app --top 1 --orderby time_desc |  jq '.[]' | tr -d "\"")
          echo "TF_VAR_image_tag=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set container app scaling env variables
        run: |
          declare -a env_vars=(
            "container_app_min_replicas"
            "container_app_max_replicas"
            "container_app_http_concurrency"
          )

          for var in "${env_vars[@]}"; do
            env_value="${!var}"
            if [ -n "$env_value" ]; then
              echo "TF_VAR_$var=$env_value" >> $GITHUB_ENV
            fi
          done

          if [ "$container_environment" == "Tst" ]; then
            export container_environment="Test"
          fi
            echo "TF_VAR_container_environment=$container_environment" >> $GITHUB_ENV

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}"  \
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}"  \
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER_NAME }}"  \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}"

      - name: Get secret and clean tfvars file (PowerShell)
        shell: pwsh
        run: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          az keyvault secret show `
            --name "${{ secrets.TF_SECRET_NAME }}" `
            --vault-name "${{ secrets.TF_SECRETS_KEYVAULT_NAME }}" `
            --query "value" `
            --output tsv > terraformVars.tfvars
          $content = Get-Content .\terraformVars.tfvars -Raw
          [System.IO.File]::WriteAllText("normalisedTerraformVars.tfvars", $content, [System.Text.Encoding]::UTF8)

      - name: Apply Terraform changes
        id: apply
        run: terraform apply -var-file="normalisedTerraformVars.tfvars" -auto-approve

      - name: Delete generated files
        run: |
          Remove-Item -Force terraformVars.tfvars
          Remove-Item -Force normalisedTerraformVars.tfvars

      - name: Remove Runner from BlobForCost SA whitelist
        shell: bash
        run: |
          az storage account network-rule remove --account-name $SA_COSTING_NAME --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Remove Runner from KV whitelist
        shell: bash
        run: |
          az keyvault network-rule remove --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ env.AZ_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null

      - name: Add Runner to TF KV whitelist
        shell: bash
        run: |
          az keyvault network-rule remove --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP	}} --name ${{ secrets.TF_SECRETS_KEYVAULT_NAME }} --ip-address ${{ steps.whats-my-ip.outputs.ip }} &> /dev/null
