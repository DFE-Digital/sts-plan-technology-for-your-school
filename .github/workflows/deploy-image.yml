name: Deploy Image to Environment

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      branch:
        type: string
        required: true
      checked-out-sha:
        type: string
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}
  cancel-in-progress: true

env:
  AZ_FRONTDOOR_URL: ${{ inputs.environment == 'staging' && secrets.AZ_FRONTDOOR_URL_STAGING || secrets.AZ_FRONTDOOR_URL }}
  GCR_DOCKER_IMAGE: plan-technology-for-your-school
  ACR_DOCKER_IMAGE: plan-tech-app
  GITHUB_CONTAINER_REGISTRY: ghcr.io
  ORG_NAME: dfe-digital

jobs:
  upgrade-database:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-22.04
    name: Update Database for ${{ inputs.environment }}
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Azure CLI Login
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.AZ_TENANT_ID }}
          az_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.AZ_CLIENT_ID }}

      - name: Build & Run Database Upgrader
        uses: ./.github/actions/build-and-run-database-upgrader
        with:
          dotnet_version: ${{ vars.DOTNET_VERSION }}
          az_keyvault_name: ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }}-kv
          az_keyvault_database_connectionstring_name: ${{ secrets.AZ_KEYVAULT_DATABASE_CONNECTIONSTRING_NAME }}
          az_sql_database_server_name: ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }}
          az_resource_group_name: ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }}
          environment: ${{ inputs.environment }}
          sql_analytics_username: ${{ secrets.ANALYTICS_USERNAME }}
          sql_analytics_password: ${{ secrets.ANALYTICS_PASSWORD }}

  pull-image-from-gcr-and-publish-to-acr:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-22.04
    name: Pull Image From GitHub Container Registry and Publish to Azure Container Registry
    environment: ${{ inputs.environment }}
    needs: upgrade-database

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: GitHub Container Registry Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Image From GCR
        run: docker pull ${{ env.GITHUB_CONTAINER_REGISTRY }}/${{ env.ORG_NAME }}/${{ env.GCR_DOCKER_IMAGE }}:${{ inputs.branch }}-${{ inputs.checked-out-sha }}
      
      - name: Azure CLI Login
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.AZ_TENANT_ID }}
          az_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.AZ_CLIENT_ID }}

      - name: Login to ACR via OIDC
        run: az acr login --name ${{ secrets.AZ_CONTAINER_REGISTRY }}

      - name: Push Image To ACR
        run: |
          docker tag ${{ env.GITHUB_CONTAINER_REGISTRY }}/${{ env.ORG_NAME }}/${{ env.GCR_DOCKER_IMAGE }}:${{ inputs.branch }}-${{ inputs.checked-out-sha }} ${{ secrets.AZ_ACR_URL }}/${{ env.ACR_DOCKER_IMAGE }}:${{ inputs.branch }}-${{ inputs.checked-out-sha }}-${{ inputs.environment }}
          docker push ${{ secrets.AZ_ACR_URL }}/${{ env.ACR_DOCKER_IMAGE }}:${{ inputs.branch }}-${{ inputs.checked-out-sha }}-${{ inputs.environment }}

  deploy-image:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-22.04
    name: Deploy Image To ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    needs: [upgrade-database, pull-image-from-gcr-and-publish-to-acr]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Azure CLI Login
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.AZ_TENANT_ID }}
          az_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.AZ_CLIENT_ID }}

      - name: Update Azure Container Apps Revision
        uses: azure/CLI@v1
        id: azure
        with:
          azcliversion: 2.73.0
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp update \
              --name ${{ secrets.AZ_ACA_NAME }} \
              --resource-group ${{ secrets.AZ_ACA_RESOURCE_GROUP }} \
              --image ${{ secrets.AZ_ACR_URL }}/${{ env.ACR_DOCKER_IMAGE }}:${{ inputs.branch }}-${{ inputs.checked-out-sha }}-${{ inputs.environment }} \
              --output none
              &> /dev/null

  flush-redis-cache:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-22.04
    name: Flush Redis Cache on ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    needs: [upgrade-database, pull-image-from-gcr-and-publish-to-acr, deploy-image]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Azure CLI Login
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.AZ_TENANT_ID }}
          az_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.AZ_CLIENT_ID }}

      - name: Flush Redis Cache
        uses: azure/CLI@v1
        id: azure
        with:
          azcliversion: 2.73.0
          inlineScript: |
            az redis flush --name ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }} --resource-group ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }} --yes

  run-e2e-testing:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-22.04
    name: Clear Database & Run E2E Tests on ${{ inputs.environment }}
    if: ${{ inputs.environment == 'tst' || inputs.environment == 'staging' }}
    environment: ${{ inputs.environment }}
    needs:
      [upgrade-database, pull-image-from-gcr-and-publish-to-acr, deploy-image, flush-redis-cache]
    env:
      az_keyvault_name: ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }}-kv
      az_keyvault_database_connectionstring_name: ${{ secrets.AZ_KEYVAULT_DATABASE_CONNECTIONSTRING_NAME }}
      az_sql_database_server_name: ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }}
      az_resource_group_name: ${{ secrets.AZ_ENVIRONMENT }}${{ secrets.DFE_PROJECT_NAME }}
      SQL_IP_NAME: e2e-tests-clear-db

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: ./.github/actions/azure-login
        with:
          az_tenant_id: ${{ secrets.AZ_TENANT_ID }}
          az_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          az_client_id: ${{ secrets.AZ_CLIENT_ID }}

      - name: Get Workflow IP Address
        id: what-is-my-ip
        uses: ./.github/actions/whats-my-ip-address

      - name: Add Azure Firewall Rules
        uses: ./.github/actions/azure-ip-whitelist
        with:
          ip_address: ${{ steps.what-is-my-ip.outputs.ip }}
          verb: "add"
          az_keyvault_name: ${{ env.az_keyvault_name }}
          az_ip_name: ${{ env.SQL_IP_NAME }}
          az_resource_group: ${{ env.az_resource_group_name}}
          az_sql_database_server_name: ${{ env.az_sql_database_server_name }}

      - name: Get Connection string
        id: get-connection-string
        uses: ./.github/actions/azure-get-keyvault-secret
        with:
          az_keyvault_name: ${{ env.az_keyvault_name }}
          az_keyvault_secret_name: ${{ env.az_keyvault_database_connectionstring_name }}

      - name: Execute Clear Database Stored Procedure
        uses: azure/sql-action@v2.2
        with:
          connection-string: ${{ steps.get-connection-string.outputs.secret_value }}
          path: "./.github/scripts/drop-establishment-data.sql"

      - name: Cypress Testing
        uses: ./.github/actions/run-e2e-tests
        with:
          url: ${{ env.AZ_FRONTDOOR_URL }}
          dsi_url: ${{ secrets.DSI_URL }}
          dsi_username: ${{ secrets.DSI_USERNAME }}
          dsi_password: ${{ secrets.DSI_PASSWORD }}
          environment: ${{ inputs.environment}}
          dsi_noorg_username: ${{ secrets.DSI_NOORG_USERNAME }}
          dsi_noorg_password: ${{ secrets.DSI_NOORG_PASSWORD }}

      - name: Remove Azure Firewall Rules
        if: always()
        uses: ./.github/actions/azure-ip-whitelist
        with:
          ip_address: ${{ steps.what-is-my-ip.outputs.ip }}
          verb: "remove"
          az_keyvault_name: ${{ env.az_keyvault_name }}
          az_ip_name: ${{ env.SQL_IP_NAME }}
          az_resource_group: ${{ env.az_resource_group_name}}
          az_sql_database_server_name: ${{ env.az_sql_database_server_name }}
